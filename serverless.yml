# serverless.yml
service: aws-ug-telegrambot-service

package:
  patterns:
    - src/assets/*

plugins:
  - serverless-offline
  - serverless-esbuild

functions:
  botHandler:
    handler: src/api-functions/botHandlerMain.handler # required, handler set in AWS Lambda
    events:
      - http:
          path: /botHandler
          method: post
          cors: true
    # name: ${sls:stage}-lambdaName # optional, Deployed Lambda name
    # description: Description of what the lambda function does # optional, Description to publish to AWS
    # runtime: nodejs16.x # optional overwrite, default is provider runtime
    # memorySize: 512 # optional, in MB, default is 1024
    # timeout: 10 # optional, in seconds, default is 6
    # provisionedConcurrency: 3 # optional, Count of provisioned lambda instances
    # reservedConcurrency: 5 # optional, reserved concurrency limit for this function. By default, AWS uses account concurrency limit
    # tracing: PassThrough # optional, overwrite, can be 'Active' or 'PassThrough'

provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'}
  region: ap-south-1
  memorySize: 512 # optional, in MB, default is 1024
  timeout: 10 # optional, in seconds, default is 6
  versionFunctions: false # optional, default is true
  logRetentionInDays: 7
  role: ServiceLambdaRole
  # tracing:
  # lambda: true # optional, enables tracing for all functions (can be true (true equals 'Active') 'Active' or 'PassThrough')

custom:
  serverless-offline:
    port: 8000
  esbuild:
    bundle: true

resources:
  Resources:
    ServiceLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:provider.stage}-${self:provider.region}-lambdaRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
                - sts:TagSession
        Policies:
          - PolicyName: ${self:service}-${self:provider.stage}-${self:provider.region}-lambdaRole
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "log-group:/aws/lambda/*:*:*"
                - Effect: Allow
                  Action:
                    - "s3:PutObject"
                  Resource:
                    - "*"
                - Effect: Allow
                  Action:
                    - "cloudformation:DescribeStacks"
                  Resource:
                    - "*"
                - Effect: Allow
                  Action:
                    - "secretsmanager:GetSecretValue"
                  Resource: arn:aws:secretsmanager:${self:provider.region}:*:*
